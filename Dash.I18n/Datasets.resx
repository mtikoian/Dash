<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ConfirmDelete" xml:space="preserve">
    <value>Are you sure you want to delete this dataset? This will also delete any reports using this dataset.</value>
  </data>
  <data name="NewName" xml:space="preserve">
    <value>Enter the name for the dataset.</value>
  </data>
  <data name="ErrorDatabaseRequired" xml:space="preserve">
    <value>Database is required.</value>
  </data>
  <data name="ErrorDuplicateName" xml:space="preserve">
    <value>A dataset with this name already exists.</value>
  </data>
  <data name="ErrorNameRequired" xml:space="preserve">
    <value>A name is required to create the dataset.</value>
  </data>
  <data name="ImportErrorNoColumnsRead" xml:space="preserve">
    <value>There were no columns found for this dataset.  Check the table names of the primary and joined tables. Also, check that the user has permission to read the information schema.</value>
  </data>
  <data name="ColumnDataType" xml:space="preserve">
    <value>DataType</value>
  </data>
  <data name="ColumnTransform" xml:space="preserve">
    <value>Transform</value>
  </data>
  <data name="ColumnFilterType" xml:space="preserve">
    <value>Filter Type</value>
  </data>
  <data name="ColumnLink" xml:space="preserve">
    <value>Link</value>
  </data>
  <data name="ColumnName" xml:space="preserve">
    <value>Column</value>
  </data>
  <data name="ColumnQuery" xml:space="preserve">
    <value>Select Query</value>
  </data>
  <data name="ColumnTitle" xml:space="preserve">
    <value>Title</value>
  </data>
  <data name="Conditions" xml:space="preserve">
    <value>Conditions</value>
  </data>
  <data name="CurrencyFormat" xml:space="preserve">
    <value>Currency Format</value>
  </data>
  <data name="Database" xml:space="preserve">
    <value>Database</value>
  </data>
  <data name="DateFormat" xml:space="preserve">
    <value>Date Format</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="Host" xml:space="preserve">
    <value>Host</value>
  </data>
  <data name="JoinKeys" xml:space="preserve">
    <value>Keys</value>
  </data>
  <data name="JoinTableName" xml:space="preserve">
    <value>Table Name</value>
  </data>
  <data name="JoinType" xml:space="preserve">
    <value>Join Type</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="PrimarySource" xml:space="preserve">
    <value>Primary Source</value>
  </data>
  <data name="ConfirmImportColumns" xml:space="preserve">
    <value>This will import any columns for the primary table and joined tables that have not already been created, and delete any columns that no longer exist. Don't forget to save the dataset after the import.</value>
  </data>
  <data name="ImportErrorDatabaseRequired" xml:space="preserve">
    <value>You must select a database before importing columns.</value>
  </data>
  <data name="ImportErrorPrimarySourceRequired" xml:space="preserve">
    <value>You must specify a table or a stored proc for the primary source before importing columns.</value>
  </data>
  <data name="LabelCopyOf" xml:space="preserve">
    <value>Copy Of {0}</value>
  </data>
  <data name="Roles" xml:space="preserve">
    <value>Roles</value>
  </data>
  <data name="Import" xml:space="preserve">
    <value>Import</value>
  </data>
  <data name="MenuItem" xml:space="preserve">
    <value>Datasets</value>
  </data>
  <data name="SuccessCopyingDataset" xml:space="preserve">
    <value>The dataset was copied successfully.</value>
  </data>
  <data name="SuccessDeletingDataset" xml:space="preserve">
    <value>The dataset was deleted successfully.</value>
  </data>
  <data name="SuccessReadingSchema" xml:space="preserve">
    <value>Columns imported successfully.</value>
  </data>
  <data name="SuccessSavingDataset" xml:space="preserve">
    <value>The dataset was saved successfully.</value>
  </data>
  <data name="Columns" xml:space="preserve">
    <value>Columns</value>
  </data>
  <data name="CreateDataset" xml:space="preserve">
    <value>Create Dataset</value>
  </data>
  <data name="EditDataset" xml:space="preserve">
    <value>Edit Dataset</value>
  </data>
  <data name="Joins" xml:space="preserve">
    <value>Joins</value>
  </data>
  <data name="Overview" xml:space="preserve">
    <value>Overview</value>
  </data>
  <data name="ViewAll" xml:space="preserve">
    <value>View All Datasets</value>
  </data>
  <data name="ViewDataset" xml:space="preserve">
    <value>View Dataset</value>
  </data>
  <data name="Type" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="ColumnIsParam" xml:space="preserve">
    <value>Input</value>
  </data>
  <data name="ErrorTableOrProcRequired" xml:space="preserve">
    <value>You must provide a primary table or a stored proc.</value>
  </data>
  <data name="LabelType_Proc" xml:space="preserve">
    <value>Stored Proc</value>
  </data>
  <data name="LabelType_Table" xml:space="preserve">
    <value>Tables</value>
  </data>
  <data name="ErrorProcNoJoins" xml:space="preserve">
    <value>When using a stored proc as the primary source, joins cannot be used.</value>
  </data>
  <data name="ImportErrorNoProcs" xml:space="preserve">
    <value>Schema can't be imported for stored procedures.</value>
  </data>
  <data name="LabelJoinType_Inner" xml:space="preserve">
    <value>Inner</value>
  </data>
  <data name="LabelJoinType_Left" xml:space="preserve">
    <value>Left</value>
  </data>
  <data name="LabelJoinType_Right" xml:space="preserve">
    <value>Right</value>
  </data>
  <data name="SuccessSavingJoin" xml:space="preserve">
    <value>The join was saved successfully.</value>
  </data>
  <data name="CreateJoin" xml:space="preserve">
    <value>Create Join</value>
  </data>
  <data name="EditJoin" xml:space="preserve">
    <value>Edit Join</value>
  </data>
  <data name="ConfirmDeleteJoin" xml:space="preserve">
    <value>Are you sure you want to delete this join?</value>
  </data>
  <data name="SuccessDeletingJoin" xml:space="preserve">
    <value>The join was deleted successfully. You will need to remove any columns that relied on this join.</value>
  </data>
  <data name="ConfirmDeleteColumn" xml:space="preserve">
    <value>Are you sure you want to delete this column?</value>
  </data>
  <data name="CreateColumn" xml:space="preserve">
    <value>Create Column</value>
  </data>
  <data name="EditColumn" xml:space="preserve">
    <value>Edit Column</value>
  </data>
  <data name="SuccessDeletingColumn" xml:space="preserve">
    <value>The column was deleted successfully.</value>
  </data>
  <data name="SuccessSavingColumn" xml:space="preserve">
    <value>The column was saved successfully.</value>
  </data>
  <data name="ErrorAlreadyFirstJoin" xml:space="preserve">
    <value>This join is already first.</value>
  </data>
  <data name="ErrorAlreadyLastJoin" xml:space="preserve">
    <value>This join is already last.</value>
  </data>
</root>